PROGRAM 1:-Write a C program to implement Single Linked List with the following set of operations:

1.Insert At Front
2.Insert At End
3.Insert At Any
4.Delete At Front
5.Delete At End
6.Delete At Any
7.Search
8.Display/Traversal

Roll No:- 32
Name:- Muhammed Fazil C

PROGRAM CODE :
#include<stdio.h>
#include <stdlib.h>
struct Node {
        int data;
        struct Node * link;
};
struct Node *header =NULL;
struct Node *createNode(int data){
        struct Node *newnode;
        newnode = malloc(sizeof(struct Node));
        newnode ->data= data;
        newnode ->link=NULL;
        return newnode;
}
void insertAtFront(int data){
        struct Node *newnode;
        newnode = createNode(data);
        if(header ==NULL){
                header =newnode;
        }else{
                newnode-> link =header;
                header = newnode;
        }
}
void insertAtEnd(int data) {
        struct Node *newnode = createNode(data);
        if (header == NULL) {
                header = newnode;
        } else{
                struct Node *ptr = header;
                while (ptr->link != NULL) {
                    ptr = ptr->link;
                }
                ptr->link = newnode;
         }
}
void insertAtAny(int data, int position) {
        struct Node *newnode = createNode(data);
        if (position < 1) {
                 printf("Invalid position\n");
        return;
        }
        if (position == 1) {
                newnode->link = header;
                header = newnode;
                return;
        }
        struct Node *ptr = header;
        for (int i = 1; i < position - 1; i++) {
                if (ptr == NULL) {
                printf("Position out of range\n");
                return;
                }
        ptr = ptr->link;
        }
        newnode->link = ptr->link;
        ptr->link = newnode;
}
void traversal(){
        struct Node *ptr = header;
        while(ptr != NULL){
                printf("%d \t",ptr->data);
                ptr=ptr->link;
        }
        printf("\n");
}
void deleteAtFront() {
        if (header == NULL) {
                printf("List is empty\n");
                return;
        }
        struct Node *temp = header;
        header = header->link;
        free(temp);
}
void deleteAtEnd(){
        if (header == NULL) {
                printf("List is empty\n");
                return;
        }
        if (header->link == NULL) {
                free(header);
                header = NULL;
        return;
        }
        struct Node *ptr = header;
        while (ptr->link->link != NULL) {
                ptr = ptr->link;
        }
        free(ptr->link);
        ptr->link = NULL;
}
void deleteAtAny(int position) {
        if (header == NULL) {
                printf("List is empty\n");
                return;
        }
        if (position < 1) {
                printf("Invalid position\n");
                return;
        }
        if (position == 1) {
                struct Node *temp = header;
                header = header->link;
                free(temp);
                return;
        }
        struct Node *ptr = header;
        for (int i = 1; i < position - 1; i++) {
                if (ptr == NULL) {
                        printf("Position out of range\n");
                        return;
                }
                ptr = ptr->link;
        }
        struct Node *temp = ptr->link;
        ptr->link = temp->link;
        free(temp);
}
int search(int key) {
        struct Node *ptr = header;
        int position = 1;
        while (ptr != NULL) {
                if (ptr->data == key) {
                        return position;
                }
        ptr = ptr->link;
        position++;
        }
        return -1;
}
int main(){
        int choice, data, position,key;
        struct Node *node;
        while (1) {   
                printf("\n1. Insert at Front\n");
                printf("2. Insert at End\n");
                printf("3. Insert at Any Position\n");
                printf("4. Delete at Front\n");
                printf("5. Delete at End\n");
                printf("6. Delete at Any Position\n");
                printf("7. Search\n");
                printf("8. Traverse\n");
                printf("9. Exit\n");
                printf("Enter your choice: ");
                scanf("%d", &choice);
                switch (choice) {
                    case 1:
                        printf("Enter data to insert: ");
                        scanf("%d", &data);
                        insertAtFront(data);
                        break;
                    case 2:
                        printf("Enter data to insert: ");
                        scanf("%d", &data);
                        insertAtEnd(data);
                        break;
                    case 3:
                        printf("Enter data to insert: ");
                        scanf("%d",&data);
                        printf("Enter position: ");
                        scanf("%d", &position);
                        insertAtAny(data, position);
                        break;
                    case 4:
                        deleteAtFront();
                        break;
                    case 5:
                        deleteAtEnd();
                        break;
                    case 6:
                        printf("Enter position to delete: ");
                        scanf("%d", &position);
                        deleteAtAny(position);
                        break;
                    case 7:
                        printf("Enter key to search: ");
                        scanf("%d", &key);
                        position = search(key);
                        if (position != -1) {
                            printf("Key %d found at position %d\n", key, position);
                        } else {
                            printf("Key %d not found in the list\n", key);
                        }
                        break;
                    case 8:
                        traversal();
                        break;
                    case 9:
                        exit(0);
                    default:
                        printf("Invalid choice\n");
                }
            }
     return 0;
}
   