PROGRAM 1:-C program to find the sum of 'n' numbers.
Roll No:- 32
Name:- Muhammed Fazil C

Program Code :-

#include<stdio.h>
int main()
{
    int n, sum = 0, c, array[100];
    printf("Enter the limit: ");
    scanf("%d", &n);
    printf("\nEnter %d integers \n", n);
    for(c = 0; c < n; c++)
    {
        scanf("%d", &array[c]);
        sum += array[c];
    }
    printf("\nSum = %d\n", sum);
    return 0;
}

PROGRAM 2:-C program to merge two sorted arrays.
Roll No:- 32
Name:- Muhammed Fazil C

Program Code :-

#include<stdio.h>

void sortArray(int arr[], int size) {
    int i, j;
    for (i = 0; i < size - 1; i++) {
        for (j = 0; j < size - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                // Swap elements
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}
void mergeArrays(int arr1[], int size1, int arr2[], int size2, int arr3[]) {
    int i;
    for (i = 0; i < size1; i++) {
        arr3[i] = arr1[i];
    }
    for (i = 0; i < size2; i++) {
        arr3[size1 + i] = arr2[i];
    }
}
int main(){
	int i,j,n,k,temp;
	int arr1[100];
	int arr2[100];
	printf("Enter the Size of First Array :");
	scanf("%d",&n);
	printf("Enter the Elements in  First Array :");
	for(i=0;i<n;i++){
	        scanf("%d", &arr1[i]);
	}
	printf("First Unsorted Array: ");
	for(i=0;i<n;i++){
	        printf("%d \t", arr1[i]);
	}
	for(i=0;i<n;i++){
	        for(j=i+1;j<n;j++){
	                if(arr1[i] > arr1[j]){
	                        temp = arr1[i];
	                        arr1[i]=arr1[j];
	                        arr1[j]=temp;
	               }
	        }
        }
        printf("\nSorted Array:  ");
        for(i=0; i<n; i++){
	        printf("%d \t",arr1[i]);
	}
	printf("\nEnter the Size of Second Array :\n");
	scanf("%d",&k);
        printf("Enter the Elements in  Second Array :\n");
	for(i=0;i<k;i++){
	        scanf("%d", &arr2[i]);
	}
	printf("Second Unsorted Array: \n");
	for(i=0;i<k;i++){
	        printf("%d \t", arr2[i]);
	}
	for(i=0;i<k;i++){
	        for(j=i+1;j<k;j++){
	                if(arr2[i] > arr2[j]){
	                        temp = arr2[i];
	                        arr2[i]=arr2[j];
	                        arr2[j]=temp;
	               }
	        }
        }
        printf("\nSecond Sorted Array:  \n");
        for(i=0; i<k; i++){
	        printf("%d \t",arr2[i]);
	}
	
	// Merge the two sorted arrays into a new array
    int arr3[n + k];
    mergeArrays(arr1, n, arr2, k, arr3);

    // Display the merged unsorted array
    printf("\n The merged unsorted array is: \n");
    for (i = 0; i < n + k; i++) {
        printf("%d ", arr3[i]);
    }
    printf("\n");

    // Sort the merged array and display it
    sortArray(arr3, n + k);
    printf("The merged sorted array is: \n");
    for (i = 0; i < n + k; i++) {
        printf("%d ", arr3[i]);
    }
    printf("\n");

    return 0;
}

PROGRAM 3:-C program to create a STACK using array data structure and implement the operations PUSH,POP and TRAVESE.
Roll No:- 32
Name:- Muhammed Fazil C

Program Code :-

#include <stdio.h>
#include <stdlib.h>
#define SIZE 5
int top = -1, array[SIZE];
void push();
void pop();
void traversal();

int main(){
    int choice;
    while (1){
        printf("\nPerform operations on the stack:");
        printf("\n1.Push the element\n2.Pop the element\n3. traversal\n4.End");
        printf("\n\nEnter the choice: ");
        scanf("%d", &choice);
	switch (choice) {
            case 1:
                push();
            	break;
            case 2:
                pop();
                break;
            case 3:
                traversal();
                break;
            case 4:
                printf("Exiting program.\n");
                return 0;
            default:
                printf("Invalid choice! Please try again\n");
        }
    }
}
void push(){
    int x;
    if (top == SIZE - 1){
        printf("\nOverflow!!");
    }
    else{
        printf("\nEnter the element to be added onto the stack: ");
        scanf("%d", &x);
        top = top + 1;
        array[top] = x;
    }
}
void pop(){
    if (top == -1){
        printf("\nUnderflow!!");
    }
    else{
        printf("\nPopped element: %d", array[top]);
        top = top - 1;
    }
}
void traversal(){
    if (top == -1){
        printf("\nUnderflow!!");
    }
    else{
        printf("\nElements present in the stack: \n");
        for (int i = top; i >= 0; --i)
            printf("%d\n", array[i]);
    }
}

PROGRAM 4:-C program to create a QUEUE using array data structure and implement the operations ENQUEUE, DEQUEUE and TRAVERSE.
Roll No:- 32
Name:- Muhammed Fazil C

Program Code :-

#include<stdio.h>
#define SIZE 5
int queue[SIZE];
int front =-1 ,rear =-1;
int isFull() {
    return (rear == SIZE - 1);
}
int isEmpty() {
    return (front == -1 || front > rear);
}
// Function to enqueue to the queue
void enqueue(int value) {
    if (isFull()) {
        printf("Queue is full! Cannot enqueue %d.\n", value);
    } else {
        if (front == -1) {
            front = 0;
        }
        rear++;
        queue[rear] = value;
        printf("%d enqueued to queue.\n", value);
    }
}
// Function to dequeue from the queue
int dequeue() {
    if (isEmpty()) {
        printf("Queue is empty! Cannot dequeue.\n");
        return -1;
    } else {
        int value = queue[front];
        front++;
        if (front == rear) { 
            front = rear = -1;
        }
        printf("%d dequeued from queue.\n", value);
        return value;
    }
}
// Function to traverse the queue
void traverse() {
    if (isEmpty()) {
        printf("Queue is empty!\n");
    } else {
        printf("Queue elements: ");
        for (int i = front; i <= rear; i++) {
            printf("%d ", queue[i]);
        }
        printf("\n");
    }
}
int main() {
    int choice, value;
    while (1) {
        printf("\nQueue Operations:\n");
        printf("1. Enqueue\n");
        printf("2. Dequeue\n");
        printf("3. Traverse\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the value to enqueue: ");
                scanf("%d", &value);
                enqueue(value);
                break;
            case 2:
                dequeue();
                break;
            case 3:
                traverse();
                break;
            case 4:
                printf("Exiting program.\n");
                return 0;
            default:
                printf("Invalid choice! Please try again\n");
        }
    }
return 0;
}







